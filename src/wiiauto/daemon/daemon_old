#include "daemon.h"
// #include "rocketbootstrap/rocketbootstrap.h"
#include "wiiauto/event/event.h"
#include "web/web.h"
#include "screenbuffer/screenbuffer.h"
#include "cherry/core/file.h"
#include "cherry/net/socket.h"
#include "wiiauto/device/device.h"
#include "wiiauto/common/common.h"
#include "log/remote_log.h"
#include <sys/mman.h>
#include "wiiauto/event/event_screen_buffer_path.h"
#include "wiiauto/springboard/springboard.h"
#include <sys/time.h>
#include "cherry/net/http_client.h"
#include "wiiauto/version.h"
#include "openssl/md5.h"
#include "wiiauto/intercom/intercom.h"

static u64 current_timestamp() 
{
    struct timeval te; 
    gettimeofday(&te, NULL);
    u64 milliseconds = te.tv_sec*1000LL + te.tv_usec/1000;
    return milliseconds;
}

void daemon_get_handler(const __wiiauto_event *data, wiiauto_event_delegate *del);
void wiiauto_daemon_timer_init();

static int __fd__ = -1;
static size_t __mem_size__ = 0;
static char __current_screen_path__[1024] = {'\0'};
static __wiiauto_pixel *__shared_mem__ = NULL;
static dispatch_queue_t screen_queue;
static dispatch_queue_t checkupdate_queue;
static http_client __http_client__ = {id_null};
static u64 __screen_timestamp__ = 0;
static u8 __check_package__ = 0;
static u8 __download_package__ = 0;

static CFDataRef callback(CFMessagePortRef local, SInt32 msgid, CFDataRef cfData, void *info) 
{
    CFDataRef ref = NULL;

    wiiauto_event_delegate del = NULL;

    const __wiiauto_event *data = (const __wiiauto_event *) CFDataGetBytePtr(cfData);
    daemon_get_handler(data, &del);

    if (del) {
        ref = del(data);
    }

    if (!ref) {
        __wiiauto_event_null evt;
        __wiiauto_event_null_init(&evt);
        ref = CFDataCreate(NULL, (const UInt8 *)&evt, sizeof(evt));
    }

    return ref;
}

// static void setup_match_port()
// {
//     CFMessagePortRef local = CFMessagePortCreateLocal(NULL, CFSTR(DAEMON_MACH_PORT_NAME), callback, NULL, NULL);
//     if (!local) {
//         goto finish;
//     }

//     CFRunLoopSourceRef source = CFMessagePortCreateRunLoopSource(NULL, local, 0);
//     if (!source) {
//         goto finish;
//     }
    
//     CFRunLoopAddSource(CFRunLoopGetCurrent(), source, kCFRunLoopCommonModes);
//     rocketbootstrap_cfmessageportexposelocal(local);
//     ;
// finish:
//     ;
// }

static void __version_dump(const char *v, int num[10])
{
    char buf[128];
    const char *ptr;
    int i, j;

    for (i = 0; i < 10; ++i) {
        num[i] = 0;
    }

    ptr = v;
    i = 0;
    j = 0;
    while (*ptr) {
        if (isdigit(*ptr)) {
            buf[i] = *ptr;
            i++;
        } else {
            buf[i] = '\0';
            num[j] = atoi(buf);
            j++;
            i = 0;
            if (j == 10) break;
        }
        ptr++;
    }
    if (i > 0 && j < 10) {
        buf[i] = '\0';
        num[j] = atoi(buf);
    }
}

static void __parse_line(const char *line, const map package, u8 *valid)
{
    const char *str, *ptr, *etr;
    u32 len;

    buffer name, content;

    buffer_new(&name);
    buffer_new(&content);

    str = strstr(line, ":");
    if (str) {
        ptr = str - 1;
        while (ptr > str && isspace(*ptr)) {
            ptr--;
        }
        buffer_append(name, line, ptr - line + 1);

        ptr = str + 1;
        while (isspace(*ptr)) {
            ptr++;
        }
        len = strlen(line);
        etr = line + len - 1;
        while (etr > ptr && isspace(*etr)) {
            etr--;
        }
        buffer_append(content, ptr, etr - ptr + 1);

        buffer_get_ptr(name, &ptr);
        map_set(package, key_str(ptr), content.iobj);

        *valid = 1;
    } else {
        *valid = 0;
    }

    release(name.iobj);
    release(content.iobj);
}


static void __download_response(const map pkg, const buffer buf)
{
    u32 len, content_len;
    const char *ptr, *str, *ck_md5;
    unsigned char hash[MD5_DIGEST_LENGTH];
    char md5string[33];
    buffer b;
    file f;

    buffer_length(buf, 1, &len);
    buffer_get_ptr(buf, &ptr);

    str = strstr(ptr, "Content-Length:");
    if(str){
        sscanf(str,"%*s %d", &content_len);
    }

    if (content_len == 0 || len < content_len) {
        
        __download_package__ = 0;

        return;
    }

    str = ptr + len - 1 - content_len + 1;

    MD5((const unsigned char *)str, content_len, hash);
    memset(md5string, 0, 33);
    for(int i = 0; i < 16; ++i) {
        sprintf(&md5string[i*2], "%02x", (unsigned int)hash[i]);
    }

    map_get(pkg, key_str("MD5sum"), &b.iobj);
    if (id_validate(b.iobj)) {
        buffer_get_ptr(b, &ck_md5);
        if (strcmp(ck_md5, md5string) == 0) {

            file_new(&f);
            file_open_write(f, "/private/var/mobile/Downloads/temp.deb");
            file_write(f, str, content_len);
            release(f.iobj);

            usleep(1000000);

            system("/usr/bin/wiiauto_run update_package &");
        } else {
            __download_package__ = 0;
        }
    } else {
        __download_package__ = 0;
    }
}

static void __download_error(const iobj user)
{
    __download_package__ = 0;
}

static void __check_update_response(const iobj user, const buffer buf)
{
    const char *ptr, *str;
    const char *token;
    u8 state = 0;
    int pk1[10], pk2[10];
    int i;
    int update = 0;
    u8 valid;
    buffer package, version, md5sum, filename;
    map pkg;
    char link[1024];

    map_new(&pkg);

    buffer_get_ptr(buf, &ptr);

    while ((token = strsep(&ptr, "\n")) != NULL) {
        __parse_line(token, pkg, &valid);

        if (valid) {
            map_get(pkg, key_str("Package"), &package.iobj);
            map_get(pkg, key_str("Version"), &version.iobj);
            map_get(pkg, key_str("Filename"), &filename.iobj);
            map_get(pkg, key_str("MD5sum"), &md5sum.iobj);
            if (id_validate(package.iobj) && id_validate(version.iobj) && id_validate(filename.iobj) && id_validate(md5sum.iobj)) {     

                buffer_get_ptr(package, &str);
                if (strcmp(str, "com.wiimob.wiiauto") == 0) {
                    
                    buffer_get_ptr(version, &str);

                    __version_dump(str, pk1);
                    __version_dump(__wiiauto_version__, pk2);
                    
                    for (i = 0; i < 10; ++i) {
                        if (pk1[i] > pk2[i]) {
                            update = 1;
                            break;
                        }
                    }

                    goto check_update;
                }

            }
        } else {
            map_remove_all(pkg);
        }
    }

check_update:
    if (!update) goto finish;

    buffer_get_ptr(filename, &str);

    strcpy(link, "https://saruno.github.io/tweaks");
    if (str[0] != '/') {
        strcat(link, "/");
    }
    strcat(link, str);

    if (!__download_package__) {
        __download_package__ = 1;

        http_client_get(__http_client__, link, pkg.iobj, (__http_client_callback){
            .response = __download_response,
            .error = __download_error
        });
    }


finish:
    buffer_erase(buf);    
    release(pkg.iobj);
    __check_package__ = 0;
}

static void __check_update_error(const iobj user)
{
    __check_package__ = 0;
}

static void checkupdate_callback(CFRunLoopTimerRef tm, void *t)
{
    if (!id_validate(__http_client__.iobj)) {
        http_client_new(&__http_client__);
    }
    if (!__check_package__) {
        __check_package__ = 1;

        http_client_get(__http_client__, "https://saruno.github.io/tweaks/Packages", __http_client__.iobj, (__http_client_callback){
            .response = __check_update_response,
            .error = __check_update_error
        });
    }

    CFRunLoopTimerSetNextFireDate(tm, CFAbsoluteTimeGetCurrent() + 5);
}

static void awake_callback(CFRunLoopTimerRef tm, void *t)
{
    common_undim_display();
    CFRunLoopTimerSetNextFireDate(tm, CFAbsoluteTimeGetCurrent() + 5);
    return;
}

static void map_screen_buffer_callback(CFRunLoopTimerRef tm, void *t)
{
    __wiiauto_event_request_screen_buffer_path rq;
    const __wiiauto_event_result_screen_buffer_path *rt;
    CFDataRef ref;

    __wiiauto_event_request_screen_buffer_path_init(&rq);   
    wiiauto_send_event(1, &rq, sizeof(rq), SPRINGBOARD_MACH_PORT_NAME, &ref);

    __wiiauto_event_result_screen_buffer_path_fetch(ref, &rt);
    if (rt && strlen(rt->path) > 0 
        && ((strcmp(rt->path, __current_screen_path__) != 0) || rt->timestamp != __screen_timestamp__)) {
        
        if (__fd__ >= 0) {
            close(__fd__);
        }
        if (__shared_mem__) {
            munmap(__shared_mem__, __mem_size__);
            __shared_mem__ = NULL;
        }
        int fd = -1;

        fd = shm_open(rt->path, O_RDONLY, S_IRUSR | S_IWUSR);
        if (fd != -1) {
            __shared_mem__ = mmap(NULL, __mem_size__, PROT_READ, MAP_SHARED, fd, 0);
            __fd__ = fd;
            strcpy(__current_screen_path__, rt->path);
            __screen_timestamp__ = rt->timestamp;
        }        
    }

    if (ref) {
        CFRelease(ref);
    }

    CFRunLoopTimerSetNextFireDate(tm, CFAbsoluteTimeGetCurrent() + 3);
    return;
}

static void notify_refresh_screen_buffer(CFNotificationCenterRef center, void *observer, CFStringRef name, const void *object, CFDictionaryRef userInfo) 
{
    dispatch_async(screen_queue, ^{

        if (__shared_mem__) {
            memcpy(__device_screen_buffer__, __shared_mem__, __mem_size__);
        }

        CFNotificationCenterPostNotification(
            CFNotificationCenterGetDarwinNotifyCenter(), 
            CFSTR("WIIAUTO_SPRINGBOARD_REFRESH_SCREEN_BUFFER"), 
            NULL, 
            NULL, 
            TRUE);

    });
}

static void __require_file(const char *name)
{
    file f;
    char buf[1024];

    file_new(&f);
    file_open_append(f, name);
    release(f.iobj);

    sprintf(buf, "chmod 666 %s", name);

    system(buf);
}

void daemon_init()
{    
    // {
    //     float width, height , factor;

    //     wiiauto_device_get_screen_size(&width, &height);
    //     wiiauto_device_get_retina_factor(&factor);

    //     width *= factor;
    //     height *= factor;    

    //     size_t shmemSize = width * height * 4;
    //     __mem_size__ = shmemSize;

    //     __device_screen_buffer__ = malloc(__mem_size__);
    // }

    // setup_match_port();

    wiiauto_daemon_web_init(); 
    wiiauto_daemon_timer_init();

    wiiauto_daemon_screenbuffer_init();

    file_require_folder(WIIAUTO_ROOT_SCRIPTS_PATH);
    screen_queue = dispatch_queue_create("com.wiimob.wiiauto.daemon_refreshscreen", NULL);
    checkupdate_queue = dispatch_queue_create("com.wiimob.wiiauto.daemon_checkupdate", NULL);

    {
        CFRunLoopRef rl = CFRunLoopGetCurrent();
        CFRunLoopTimerContext ctx;
        ctx.retain = NULL;
        ctx.release = NULL;
        ctx.copyDescription = NULL;
        ctx.version = 0;
        ctx.info = NULL;
        CFRunLoopTimerRef timer = CFRunLoopTimerCreate(kCFAllocatorDefault, 0, 9999999, 0, 0, (void(*)(CFRunLoopTimerRef, void *))awake_callback, &ctx);

        CFRunLoopAddTimer(rl, timer, kCFRunLoopCommonModes);   
    }    

    // {
    //     CFRunLoopRef rl = CFRunLoopGetCurrent();
    //     CFRunLoopTimerContext ctx;
    //     ctx.retain = NULL;
    //     ctx.release = NULL;
    //     ctx.copyDescription = NULL;
    //     ctx.version = 0;
    //     ctx.info = NULL;
    //     CFRunLoopTimerRef timer = CFRunLoopTimerCreate(kCFAllocatorDefault, 0, 9999999, 0, 0, (void(*)(CFRunLoopTimerRef, void *))map_screen_buffer_callback, &ctx);

    //     CFRunLoopAddTimer(rl, timer, kCFRunLoopCommonModes);   
    // }    
 
    {
        CFRunLoopRef rl = CFRunLoopGetCurrent();
        CFRunLoopTimerContext ctx;
        ctx.retain = NULL;
        ctx.release = NULL;
        ctx.copyDescription = NULL;
        ctx.version = 0;
        ctx.info = NULL;
        CFRunLoopTimerRef timer = CFRunLoopTimerCreate(kCFAllocatorDefault, 0, 9999999, 0, 0, (void(*)(CFRunLoopTimerRef, void *))checkupdate_callback, &ctx);

        CFRunLoopAddTimer(rl, timer, kCFRunLoopCommonModes);   
    }    

    // {
    //     CFNotificationCenterAddObserver(CFNotificationCenterGetDarwinNotifyCenter(), 
    //         NULL, 
    //         notify_refresh_screen_buffer,
    //         CFSTR("WIIAUTO_DAEMON_REFRESH_SCREEN_BUFFER"), 
    //         NULL, 
    //         CFNotificationSuspensionBehaviorCoalesce);
    // }

    __require_file(DAEMON_FILE_ALERT_APP);
    __require_file(DAEMON_FILE_ALERT_SPRINGBOARD);
    __require_file(DAEMON_FILE_LOCATION);

    // {
    //     net_socket server;
    //     net_socket_new(&server);
    //     net_socket_bind_unix(server, "/var/run/wiiauto_springboard_unixdomain.sock");
    //     release(server.iobj);
    // }
}